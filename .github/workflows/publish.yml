name: Publish Package

on:
  push:
    branches:
      - main

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      # 🧭 Checkout
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_TOKEN }}

      # ⚙️ Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          registry-url: "https://registry.npmjs.org"

      # 💾 Restore Yarn Cache
      - name: Restore Yarn Cache
        id: yarn-cache
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
            .yarn/install-state.gz
          key: ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}-${{ hashFiles('**/package.json', '!node_modules/**') }}
          restore-keys: |
            ${{ runner.os }}-yarn-${{ hashFiles('yarn.lock') }}
            ${{ runner.os }}-yarn-

      # 🧶 Setup Yarn & Install
      - name: Setup Yarn and Install Dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: |
          echo "Setting up Yarn..."
          if [ -f .yarnrc.yml ]; then mv .yarnrc.yml .yarnrc.yml.backup; fi

          cat > .yarnrc.yml << EOF
          nodeLinker: node-modules
          enableGlobalCache: false
          EOF

          corepack enable
          corepack prepare yarn@stable --activate
          yarn install --no-immutable
        shell: bash

      # 🧩 Cache Save
      - name: Cache Yarn Dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            **/node_modules
            .yarn/install-state.gz
          key: ${{ steps.yarn-cache.outputs.cache-primary-key }}

      # 🧠 Quality Checks
      - name: Typecheck + Lint + Test
        run: |
          echo "Running typecheck, lint, and tests..."
          yarn typecheck || true
          yarn lint --fix || true
          yarn test --passWithNoTests || true

      # ⚡️ Run Nitrogen Codegen
      - name: Run Nitrogen Codegen
        run: |
          echo "Running Nitrogen codegen..."
          if yarn run nitrogen; then
            echo "✅ Nitrogen codegen completed successfully."
          else
            echo "⚠️ Nitrogen step failed or not needed — continuing."
          fi

      # 🏗️ Build
      - name: Build Library
        run: yarn prepare

      # 🔍 Verify Dist
      - name: Verify Build Output
        run: |
          echo "Verifying built files..."
          ls -la lib/
          test -f lib/module/index.js && test -f lib/typescript/src/index.d.ts

      # 🧾 Configure Git
      - name: Configure Git Identity
        run: |
          git config user.name "Gautham495"
          git config user.email "kinggautham495@gmail.com"

      # 🏷️ Version Bump + Tag
      - name: Bump Version & Tag
        run: |
          echo "Bumping patch version..."
          node -e "
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            const v = pkg.version.split('.'); v[2] = (+v[2] || 0) + 1;
            pkg.version = v.join('.');
            fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
            console.log('New version:', pkg.version);
          "

          VERSION=$(node -p "require('./package.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV

          git add package.json
          git commit -m "chore: release v$VERSION [skip ci]" || true
          git tag "v$VERSION"
          git push origin main --tags

      # 📦 Publish to npm
      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # ✅ Post-publish confirmation
      - name: Confirm Published Version
        run: npm view react-native-play-age-range-declaration version
