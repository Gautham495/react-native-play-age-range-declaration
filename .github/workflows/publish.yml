name: Deploy (manual)

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version or semver (e.g., 3.2.0 | patch | minor | major)'
        required: true
        type: string
      tag:
        description: 'npm dist-tag to publish under'
        required: true
        default: latest
        type: choice
        options:
          - latest
          - next
      create_release:
        description: 'Also create a GitHub Release from the tag'
        required: false
        default: false
        type: boolean
      git_user_name:
        description: 'Git author name for release commit'
        required: false
        default: 'react-native-play-age-range-declaration bot'
        type: string
      git_user_email:
        description: 'Git author email for release commit'
        required: false
        default: 'github-actions[bot]@users.noreply.github.com'
        type: string

permissions:
  contents: write
  packages: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 🧭 Checkout
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ⚙️ Setup Node.js (via .nvmrc)
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          registry-url: 'https://registry.npmjs.org'
          always-auth: true

      # 🧶 Enable Corepack + Yarn 3
      - name: Enable Corepack (Yarn 3)
        run: corepack enable

      # 💾 Cache Yarn
      - name: Get Yarn cache dir
        id: yarn_cache
        run: echo "dir=$(yarn config get cacheFolder)" >> "$GITHUB_OUTPUT"

      - name: Restore Yarn cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.yarn_cache.outputs.dir }}
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-${{ runner.os }}-

      # 🧩 Install deps (allow lockfile update)
      - name: Install dependencies
        run: |
          echo "Installing dependencies (allowing lockfile updates)..."
          yarn install --no-immutable
        shell: bash

      # ⚙️ Configure Git
      - name: Configure Git user
        run: |
          git config user.name "${{ github.event.inputs.git_user_name }}"
          git config user.email "${{ github.event.inputs.git_user_email }}"

      # 🏷️ Bump version + tag commit
      - name: Bump version and tag
        id: bump
        env:
          INPUT_VERSION: ${{ github.event.inputs.version }}
        run: |
          npm version "$INPUT_VERSION" --tag-version-prefix="" -m "chore(release): %s"
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "version=$NEW_VERSION" >> "$GITHUB_OUTPUT"

      # ⚡️ Run Nitrogen codegen (before build)
      - name: Run Nitrogen codegen
        run: |
          echo "Running Nitrogen codegen (if defined)..."
          if yarn run nitrogen; then
            echo "✅ Nitrogen codegen completed successfully."
          else
            echo "⚠️ Nitrogen step skipped or failed (safe to ignore)."
          fi

      # 🏗️ Build package (bob build + tsc)
      - name: Prepare package (build + typegen)
        run: yarn prepare

      # 🚀 Push release commit + tag
      - name: Push commit and tags
        run: git push --follow-tags

      # 🔑 Configure npm auth
      - name: Configure npm auth
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc

      - name: Verify npm auth
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm whoami

      # 📦 Publish to npm
      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          TAG=${{ github.event.inputs.tag }}
          echo "Publishing under tag '$TAG'..."
          if [ "$TAG" = "latest" ]; then
            npm publish --access public
          else
            npm publish --tag "$TAG" --access public
          fi

      # 🪄 Optional GitHub Release
      - name: Create GitHub Release
        if: ${{ github.event.inputs.create_release == 'true' }}
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.bump.outputs.version }}
          name: v${{ steps.bump.outputs.version }}
          draft: false
          prerelease: ${{ github.event.inputs.tag != 'latest' }}
          generate_release_notes: true
