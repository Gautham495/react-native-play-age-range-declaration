///
/// JHybridPlayAgeRangeDeclarationSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridPlayAgeRangeDeclarationSpec.hpp"

// Forward declaration of `PlayAgeRangeDeclarationResult` to properly resolve imports.
namespace margelo::nitro::playagerangedeclaration { struct PlayAgeRangeDeclarationResult; }
// Forward declaration of `DeclaredAgeRangeResult` to properly resolve imports.
namespace margelo::nitro::playagerangedeclaration { struct DeclaredAgeRangeResult; }

#include "PlayAgeRangeDeclarationResult.hpp"
#include <NitroModules/Promise.hpp>
#include <NitroModules/JPromise.hpp>
#include "JPlayAgeRangeDeclarationResult.hpp"
#include <string>
#include <optional>
#include "DeclaredAgeRangeResult.hpp"
#include "JDeclaredAgeRangeResult.hpp"

namespace margelo::nitro::playagerangedeclaration {

  jni::local_ref<JHybridPlayAgeRangeDeclarationSpec::jhybriddata> JHybridPlayAgeRangeDeclarationSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridPlayAgeRangeDeclarationSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridPlayAgeRangeDeclarationSpec::initHybrid),
    });
  }

  size_t JHybridPlayAgeRangeDeclarationSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridPlayAgeRangeDeclarationSpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  // Properties
  

  // Methods
  std::shared_ptr<Promise<PlayAgeRangeDeclarationResult>> JHybridPlayAgeRangeDeclarationSpec::getPlayAgeRangeDeclaration() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>()>("getPlayAgeRangeDeclaration");
    auto __result = method(_javaPart);
    return [&]() {
      auto __promise = Promise<PlayAgeRangeDeclarationResult>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<JPlayAgeRangeDeclarationResult>(__boxedResult);
        __promise->resolve(__result->toCpp());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<DeclaredAgeRangeResult>> JHybridPlayAgeRangeDeclarationSpec::requestDeclaredAgeRange(double ageGate) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(double /* ageGate */)>("requestDeclaredAgeRange");
    auto __result = method(_javaPart, ageGate);
    return [&]() {
      auto __promise = Promise<DeclaredAgeRangeResult>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<JDeclaredAgeRangeResult>(__boxedResult);
        __promise->resolve(__result->toCpp());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }

} // namespace margelo::nitro::playagerangedeclaration
