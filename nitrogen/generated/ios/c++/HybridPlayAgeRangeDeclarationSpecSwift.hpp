///
/// HybridPlayAgeRangeDeclarationSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridPlayAgeRangeDeclarationSpec.hpp"

// Forward declaration of `HybridPlayAgeRangeDeclarationSpec_cxx` to properly resolve imports.
namespace PlayAgeRangeDeclaration { class HybridPlayAgeRangeDeclarationSpec_cxx; }

// Forward declaration of `PlayAgeRangeDeclarationResult` to properly resolve imports.
namespace margelo::nitro::playagerangedeclaration { struct PlayAgeRangeDeclarationResult; }
// Forward declaration of `DeclaredAgeRangeResult` to properly resolve imports.
namespace margelo::nitro::playagerangedeclaration { struct DeclaredAgeRangeResult; }

#include "PlayAgeRangeDeclarationResult.hpp"
#include <NitroModules/Promise.hpp>
#include <string>
#include <optional>
#include "DeclaredAgeRangeResult.hpp"

#include "PlayAgeRangeDeclaration-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::playagerangedeclaration {

  /**
   * The C++ part of HybridPlayAgeRangeDeclarationSpec_cxx.swift.
   *
   * HybridPlayAgeRangeDeclarationSpecSwift (C++) accesses HybridPlayAgeRangeDeclarationSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridPlayAgeRangeDeclarationSpec_cxx can directly inherit from the C++ class HybridPlayAgeRangeDeclarationSpec
   * to simplify the whole structure and memory management.
   */
  class HybridPlayAgeRangeDeclarationSpecSwift: public virtual HybridPlayAgeRangeDeclarationSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridPlayAgeRangeDeclarationSpecSwift(const PlayAgeRangeDeclaration::HybridPlayAgeRangeDeclarationSpec_cxx& swiftPart):
      HybridObject(HybridPlayAgeRangeDeclarationSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline PlayAgeRangeDeclaration::HybridPlayAgeRangeDeclarationSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }
    void dispose() noexcept override {
      _swiftPart.dispose();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline std::shared_ptr<Promise<PlayAgeRangeDeclarationResult>> getPlayAgeRangeDeclaration() override {
      auto __result = _swiftPart.getPlayAgeRangeDeclaration();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<DeclaredAgeRangeResult>> requestDeclaredAgeRange(double ageGate) override {
      auto __result = _swiftPart.requestDeclaredAgeRange(std::forward<decltype(ageGate)>(ageGate));
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    PlayAgeRangeDeclaration::HybridPlayAgeRangeDeclarationSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::playagerangedeclaration
