///
/// PlayAgeRangeDeclaration-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `DeclaredAgeRangeResult` to properly resolve imports.
namespace margelo::nitro::playagerangedeclaration { struct DeclaredAgeRangeResult; }
// Forward declaration of `HybridPlayAgeRangeDeclarationSpec` to properly resolve imports.
namespace margelo::nitro::playagerangedeclaration { class HybridPlayAgeRangeDeclarationSpec; }
// Forward declaration of `PlayAgeRangeDeclarationResult` to properly resolve imports.
namespace margelo::nitro::playagerangedeclaration { struct PlayAgeRangeDeclarationResult; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridPlayAgeRangeDeclarationSpec_cxx` to properly resolve imports.
namespace PlayAgeRangeDeclaration { class HybridPlayAgeRangeDeclarationSpec_cxx; }

// Include C++ defined types
#include "DeclaredAgeRangeResult.hpp"
#include "HybridPlayAgeRangeDeclarationSpec.hpp"
#include "PlayAgeRangeDeclarationResult.hpp"
#include <NitroModules/Promise.hpp>
#include <NitroModules/PromiseHolder.hpp>
#include <NitroModules/Result.hpp>
#include <exception>
#include <functional>
#include <memory>
#include <optional>
#include <string>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::playagerangedeclaration::bridge::swift {

  // pragma MARK: std::optional<std::string>
  /**
   * Specialized version of `std::optional<std::string>`.
   */
  using std__optional_std__string_ = std::optional<std::string>;
  inline std::optional<std::string> create_std__optional_std__string_(const std::string& value) noexcept {
    return std::optional<std::string>(value);
  }
  inline bool has_value_std__optional_std__string_(const std::optional<std::string>& optional) noexcept {
    return optional.has_value();
  }
  inline std::string get_std__optional_std__string_(const std::optional<std::string>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::shared_ptr<Promise<PlayAgeRangeDeclarationResult>>
  /**
   * Specialized version of `std::shared_ptr<Promise<PlayAgeRangeDeclarationResult>>`.
   */
  using std__shared_ptr_Promise_PlayAgeRangeDeclarationResult__ = std::shared_ptr<Promise<PlayAgeRangeDeclarationResult>>;
  inline std::shared_ptr<Promise<PlayAgeRangeDeclarationResult>> create_std__shared_ptr_Promise_PlayAgeRangeDeclarationResult__() noexcept {
    return Promise<PlayAgeRangeDeclarationResult>::create();
  }
  inline PromiseHolder<PlayAgeRangeDeclarationResult> wrap_std__shared_ptr_Promise_PlayAgeRangeDeclarationResult__(std::shared_ptr<Promise<PlayAgeRangeDeclarationResult>> promise) noexcept {
    return PromiseHolder<PlayAgeRangeDeclarationResult>(std::move(promise));
  }
  
  // pragma MARK: std::function<void(const PlayAgeRangeDeclarationResult& /* result */)>
  /**
   * Specialized version of `std::function<void(const PlayAgeRangeDeclarationResult&)>`.
   */
  using Func_void_PlayAgeRangeDeclarationResult = std::function<void(const PlayAgeRangeDeclarationResult& /* result */)>;
  /**
   * Wrapper class for a `std::function<void(const PlayAgeRangeDeclarationResult& / * result * /)>`, this can be used from Swift.
   */
  class Func_void_PlayAgeRangeDeclarationResult_Wrapper final {
  public:
    explicit Func_void_PlayAgeRangeDeclarationResult_Wrapper(std::function<void(const PlayAgeRangeDeclarationResult& /* result */)>&& func): _function(std::make_unique<std::function<void(const PlayAgeRangeDeclarationResult& /* result */)>>(std::move(func))) {}
    inline void call(PlayAgeRangeDeclarationResult result) const noexcept {
      _function->operator()(result);
    }
  private:
    std::unique_ptr<std::function<void(const PlayAgeRangeDeclarationResult& /* result */)>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void_PlayAgeRangeDeclarationResult create_Func_void_PlayAgeRangeDeclarationResult(void* NON_NULL swiftClosureWrapper) noexcept;
  inline Func_void_PlayAgeRangeDeclarationResult_Wrapper wrap_Func_void_PlayAgeRangeDeclarationResult(Func_void_PlayAgeRangeDeclarationResult value) noexcept {
    return Func_void_PlayAgeRangeDeclarationResult_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::function<void(const std::exception_ptr& /* error */)>
  /**
   * Specialized version of `std::function<void(const std::exception_ptr&)>`.
   */
  using Func_void_std__exception_ptr = std::function<void(const std::exception_ptr& /* error */)>;
  /**
   * Wrapper class for a `std::function<void(const std::exception_ptr& / * error * /)>`, this can be used from Swift.
   */
  class Func_void_std__exception_ptr_Wrapper final {
  public:
    explicit Func_void_std__exception_ptr_Wrapper(std::function<void(const std::exception_ptr& /* error */)>&& func): _function(std::make_unique<std::function<void(const std::exception_ptr& /* error */)>>(std::move(func))) {}
    inline void call(std::exception_ptr error) const noexcept {
      _function->operator()(error);
    }
  private:
    std::unique_ptr<std::function<void(const std::exception_ptr& /* error */)>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void_std__exception_ptr create_Func_void_std__exception_ptr(void* NON_NULL swiftClosureWrapper) noexcept;
  inline Func_void_std__exception_ptr_Wrapper wrap_Func_void_std__exception_ptr(Func_void_std__exception_ptr value) noexcept {
    return Func_void_std__exception_ptr_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::optional<double>
  /**
   * Specialized version of `std::optional<double>`.
   */
  using std__optional_double_ = std::optional<double>;
  inline std::optional<double> create_std__optional_double_(const double& value) noexcept {
    return std::optional<double>(value);
  }
  inline bool has_value_std__optional_double_(const std::optional<double>& optional) noexcept {
    return optional.has_value();
  }
  inline double get_std__optional_double_(const std::optional<double>& optional) noexcept {
    return *optional;
  }
  
  // pragma MARK: std::shared_ptr<Promise<DeclaredAgeRangeResult>>
  /**
   * Specialized version of `std::shared_ptr<Promise<DeclaredAgeRangeResult>>`.
   */
  using std__shared_ptr_Promise_DeclaredAgeRangeResult__ = std::shared_ptr<Promise<DeclaredAgeRangeResult>>;
  inline std::shared_ptr<Promise<DeclaredAgeRangeResult>> create_std__shared_ptr_Promise_DeclaredAgeRangeResult__() noexcept {
    return Promise<DeclaredAgeRangeResult>::create();
  }
  inline PromiseHolder<DeclaredAgeRangeResult> wrap_std__shared_ptr_Promise_DeclaredAgeRangeResult__(std::shared_ptr<Promise<DeclaredAgeRangeResult>> promise) noexcept {
    return PromiseHolder<DeclaredAgeRangeResult>(std::move(promise));
  }
  
  // pragma MARK: std::function<void(const DeclaredAgeRangeResult& /* result */)>
  /**
   * Specialized version of `std::function<void(const DeclaredAgeRangeResult&)>`.
   */
  using Func_void_DeclaredAgeRangeResult = std::function<void(const DeclaredAgeRangeResult& /* result */)>;
  /**
   * Wrapper class for a `std::function<void(const DeclaredAgeRangeResult& / * result * /)>`, this can be used from Swift.
   */
  class Func_void_DeclaredAgeRangeResult_Wrapper final {
  public:
    explicit Func_void_DeclaredAgeRangeResult_Wrapper(std::function<void(const DeclaredAgeRangeResult& /* result */)>&& func): _function(std::make_unique<std::function<void(const DeclaredAgeRangeResult& /* result */)>>(std::move(func))) {}
    inline void call(DeclaredAgeRangeResult result) const noexcept {
      _function->operator()(result);
    }
  private:
    std::unique_ptr<std::function<void(const DeclaredAgeRangeResult& /* result */)>> _function;
  } SWIFT_NONCOPYABLE;
  Func_void_DeclaredAgeRangeResult create_Func_void_DeclaredAgeRangeResult(void* NON_NULL swiftClosureWrapper) noexcept;
  inline Func_void_DeclaredAgeRangeResult_Wrapper wrap_Func_void_DeclaredAgeRangeResult(Func_void_DeclaredAgeRangeResult value) noexcept {
    return Func_void_DeclaredAgeRangeResult_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::shared_ptr<HybridPlayAgeRangeDeclarationSpec>
  /**
   * Specialized version of `std::shared_ptr<HybridPlayAgeRangeDeclarationSpec>`.
   */
  using std__shared_ptr_HybridPlayAgeRangeDeclarationSpec_ = std::shared_ptr<HybridPlayAgeRangeDeclarationSpec>;
  std::shared_ptr<HybridPlayAgeRangeDeclarationSpec> create_std__shared_ptr_HybridPlayAgeRangeDeclarationSpec_(void* NON_NULL swiftUnsafePointer) noexcept;
  void* NON_NULL get_std__shared_ptr_HybridPlayAgeRangeDeclarationSpec_(std__shared_ptr_HybridPlayAgeRangeDeclarationSpec_ cppType);
  
  // pragma MARK: std::weak_ptr<HybridPlayAgeRangeDeclarationSpec>
  using std__weak_ptr_HybridPlayAgeRangeDeclarationSpec_ = std::weak_ptr<HybridPlayAgeRangeDeclarationSpec>;
  inline std__weak_ptr_HybridPlayAgeRangeDeclarationSpec_ weakify_std__shared_ptr_HybridPlayAgeRangeDeclarationSpec_(const std::shared_ptr<HybridPlayAgeRangeDeclarationSpec>& strong) noexcept { return strong; }
  
  // pragma MARK: Result<std::shared_ptr<Promise<PlayAgeRangeDeclarationResult>>>
  using Result_std__shared_ptr_Promise_PlayAgeRangeDeclarationResult___ = Result<std::shared_ptr<Promise<PlayAgeRangeDeclarationResult>>>;
  inline Result_std__shared_ptr_Promise_PlayAgeRangeDeclarationResult___ create_Result_std__shared_ptr_Promise_PlayAgeRangeDeclarationResult___(const std::shared_ptr<Promise<PlayAgeRangeDeclarationResult>>& value) noexcept {
    return Result<std::shared_ptr<Promise<PlayAgeRangeDeclarationResult>>>::withValue(value);
  }
  inline Result_std__shared_ptr_Promise_PlayAgeRangeDeclarationResult___ create_Result_std__shared_ptr_Promise_PlayAgeRangeDeclarationResult___(const std::exception_ptr& error) noexcept {
    return Result<std::shared_ptr<Promise<PlayAgeRangeDeclarationResult>>>::withError(error);
  }
  
  // pragma MARK: Result<std::shared_ptr<Promise<DeclaredAgeRangeResult>>>
  using Result_std__shared_ptr_Promise_DeclaredAgeRangeResult___ = Result<std::shared_ptr<Promise<DeclaredAgeRangeResult>>>;
  inline Result_std__shared_ptr_Promise_DeclaredAgeRangeResult___ create_Result_std__shared_ptr_Promise_DeclaredAgeRangeResult___(const std::shared_ptr<Promise<DeclaredAgeRangeResult>>& value) noexcept {
    return Result<std::shared_ptr<Promise<DeclaredAgeRangeResult>>>::withValue(value);
  }
  inline Result_std__shared_ptr_Promise_DeclaredAgeRangeResult___ create_Result_std__shared_ptr_Promise_DeclaredAgeRangeResult___(const std::exception_ptr& error) noexcept {
    return Result<std::shared_ptr<Promise<DeclaredAgeRangeResult>>>::withError(error);
  }

} // namespace margelo::nitro::playagerangedeclaration::bridge::swift
